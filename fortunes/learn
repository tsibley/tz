#!/usr/bin/env perl
use utf8;
use strict;
use warnings;
use 5.020;
use open qw< :std :encoding(UTF-8) >;
use experimental qw< signatures >;
use English qw< %LAST_PAREN_MATCH >;
use JSON::PP;

my $JSON = JSON::PP->new->canonical;

my $GIT_REF = `git rev-parse --short HEAD 2>/dev/null` // "master";
chomp $GIT_REF;

my $note = "";
my $lines = [];

sub main() {
    while (<<>>) {
        # New note
        if (/^# From/) {
            emit($note, $ARGV, $lines);

            $note = s/^# //r;
            $lines = [$., $.];
        }

        # Continuation of note
        elsif (/^#(?! (Rule|Zone))/ and $note) {
            $note .= s/^# ?//r;
            $lines->[1] = $.;
        }

        # End of current note
        elsif (/^ \s* $/x and $note) {
            emit($note, $ARGV, $lines);
            $note = "";
            $lines = [];
        }
    } continue {
        # Reset line numbering for each file, instead of counting across files.
        close ARGV if eof;
    }
}

sub emit($note, $file = "-", $lines = []) {
    return if not $note or $lines->[0] == $lines->[1];

    my ($start, $end) = @$lines;
    my $link = "https://github.com/eggert/tz/tree/$GIT_REF/$file#L$start-L$end";

    my ($from, $date) = parse_attribution($note);

    $from =~ s/\n+/ /g
        if defined $from;

    say $JSON->encode({
        note => $note =~ s/\n+$//r,
        from => $from,
        date => $date,
        link => $file ne "-" ? $link : undef,
        file => $file,
        lines => $lines,
    });
}

sub parse_attribution($note) {
    my $isodate = qr/\d{4}-\d{2}-\d{2}/a;
    my @styles  = (
        qr/\AFrom \s+ (?<from>(?s:.+?))   \s+ \((?<date>$isodate)\) : /x,
        qr/\AFrom \s+ (?<from>.+)         \s+ \((?<date>$isodate)\)   /x,
        qr/\AFrom \s+ (?<from>.+?) ,?     \s+   (?<date>$isodate)     /x,
        qr/\AFrom \s+ (?<from>.+?) :? $/xm,
    );

    for my $style (@styles) {
        return @LAST_PAREN_MATCH{qw<from date>}
            if $note =~ /$style/;
    }
    return (undef, undef);
}

main();
